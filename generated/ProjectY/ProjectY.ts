// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Bid extends ethereum.Event {
  get params(): Bid__Params {
    return new Bid__Params(this);
  }
}

export class Bid__Params {
  _event: Bid;

  constructor(event: Bid) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get entryId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bidId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class BidSelected extends ethereum.Event {
  get params(): BidSelected__Params {
    return new BidSelected__Params(this);
  }
}

export class BidSelected__Params {
  _event: BidSelected;

  constructor(event: BidSelected) {
    this._event = event;
  }

  get bidId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get entryId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BidWithdrawn extends ethereum.Event {
  get params(): BidWithdrawn__Params {
    return new BidWithdrawn__Params(this);
  }
}

export class BidWithdrawn__Params {
  _event: BidWithdrawn;

  constructor(event: BidWithdrawn) {
    this._event = event;
  }

  get bidId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get entryId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BiddingPeriodUpdated extends ethereum.Event {
  get params(): BiddingPeriodUpdated__Params {
    return new BiddingPeriodUpdated__Params(this);
  }
}

export class BiddingPeriodUpdated__Params {
  _event: BiddingPeriodUpdated;

  constructor(event: BiddingPeriodUpdated) {
    this._event = event;
  }

  get prevBiddingPeriod(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newBiddingPeriod(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class GracePeriodUpdated extends ethereum.Event {
  get params(): GracePeriodUpdated__Params {
    return new GracePeriodUpdated__Params(this);
  }
}

export class GracePeriodUpdated__Params {
  _event: GracePeriodUpdated;

  constructor(event: GracePeriodUpdated) {
    this._event = event;
  }

  get prevGracePeriod(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newGracePeriod(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class InstallmentPaid extends ethereum.Event {
  get params(): InstallmentPaid__Params {
    return new InstallmentPaid__Params(this);
  }
}

export class InstallmentPaid__Params {
  _event: InstallmentPaid;

  constructor(event: InstallmentPaid) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get entryId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bidId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get installmentNumber(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Liquidated extends ethereum.Event {
  get params(): Liquidated__Params {
    return new Liquidated__Params(this);
  }
}

export class Liquidated__Params {
  _event: Liquidated;

  constructor(event: Liquidated) {
    this._event = event;
  }

  get entryId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bidId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get installmentPaid(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnerUpdated extends ethereum.Event {
  get params(): OwnerUpdated__Params {
    return new OwnerUpdated__Params(this);
  }
}

export class OwnerUpdated__Params {
  _event: OwnerUpdated;

  constructor(event: OwnerUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PaymentWithdrawn extends ethereum.Event {
  get params(): PaymentWithdrawn__Params {
    return new PaymentWithdrawn__Params(this);
  }
}

export class PaymentWithdrawn__Params {
  _event: PaymentWithdrawn;

  constructor(event: PaymentWithdrawn) {
    this._event = event;
  }

  get bidId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get entryId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get paymentsClaimed(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Sell extends ethereum.Event {
  get params(): Sell__Params {
    return new Sell__Params(this);
  }
}

export class Sell__Params {
  _event: Sell;

  constructor(event: Sell) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get contractAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get entryId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SellWithdrawn extends ethereum.Event {
  get params(): SellWithdrawn__Params {
    return new SellWithdrawn__Params(this);
  }
}

export class SellWithdrawn__Params {
  _event: SellWithdrawn;

  constructor(event: SellWithdrawn) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get entryId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ProjectY__getAllBidsOnNFTResultAllBidsOnNFT_Struct extends ethereum.Tuple {
  get isSelected(): boolean {
    return this[0].toBoolean();
  }

  get buyerAddress(): Address {
    return this[1].toAddress();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }

  get bidPrice(): BigInt {
    return this[3].toBigInt();
  }

  get entryId(): BigInt {
    return this[4].toBigInt();
  }

  get pricePaid(): BigInt {
    return this[5].toBigInt();
  }

  get bidInstallment(): i32 {
    return this[6].toI32();
  }
}

export class ProjectY__getAllBidsOnNFTResult {
  value0: Array<ProjectY__getAllBidsOnNFTResultAllBidsOnNFT_Struct>;
  value1: Array<BigInt>;

  constructor(
    value0: Array<ProjectY__getAllBidsOnNFTResultAllBidsOnNFT_Struct>,
    value1: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTupleArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getAllBidsOnNFT_(): Array<
    ProjectY__getAllBidsOnNFTResultAllBidsOnNFT_Struct
  > {
    return this.value0;
  }

  getBidIds_(): Array<BigInt> {
    return this.value1;
  }
}

export class ProjectY__getBuyerInfoResultValue0Struct extends ethereum.Tuple {
  get isSelected(): boolean {
    return this[0].toBoolean();
  }

  get buyerAddress(): Address {
    return this[1].toAddress();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }

  get bidPrice(): BigInt {
    return this[3].toBigInt();
  }

  get entryId(): BigInt {
    return this[4].toBigInt();
  }

  get pricePaid(): BigInt {
    return this[5].toBigInt();
  }

  get bidInstallment(): i32 {
    return this[6].toI32();
  }
}

export class ProjectY__getNFTsOpenForSaleResultNftsOpenForSale_Struct extends ethereum.Tuple {
  get onSale(): boolean {
    return this[0].toBoolean();
  }

  get sellerAddress(): Address {
    return this[1].toAddress();
  }

  get contractAddress(): Address {
    return this[2].toAddress();
  }

  get installmentsPaid(): i32 {
    return this[3].toI32();
  }

  get paymentsClaimed(): i32 {
    return this[4].toI32();
  }

  get timestamp(): BigInt {
    return this[5].toBigInt();
  }

  get tokenId(): BigInt {
    return this[6].toBigInt();
  }

  get sellingPrice(): BigInt {
    return this[7].toBigInt();
  }

  get totalBids(): BigInt {
    return this[8].toBigInt();
  }

  get selectedBidId(): BigInt {
    return this[9].toBigInt();
  }

  get installment(): i32 {
    return this[10].toI32();
  }
}

export class ProjectY__getNFTsOpenForSaleResult {
  value0: Array<ProjectY__getNFTsOpenForSaleResultNftsOpenForSale_Struct>;
  value1: Array<BigInt>;

  constructor(
    value0: Array<ProjectY__getNFTsOpenForSaleResultNftsOpenForSale_Struct>,
    value1: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTupleArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getNftsOpenForSale_(): Array<
    ProjectY__getNFTsOpenForSaleResultNftsOpenForSale_Struct
  > {
    return this.value0;
  }

  getEntryIds_(): Array<BigInt> {
    return this.value1;
  }
}

export class ProjectY__getSellerInfoResultValue0Struct extends ethereum.Tuple {
  get onSale(): boolean {
    return this[0].toBoolean();
  }

  get sellerAddress(): Address {
    return this[1].toAddress();
  }

  get contractAddress(): Address {
    return this[2].toAddress();
  }

  get installmentsPaid(): i32 {
    return this[3].toI32();
  }

  get paymentsClaimed(): i32 {
    return this[4].toI32();
  }

  get timestamp(): BigInt {
    return this[5].toBigInt();
  }

  get tokenId(): BigInt {
    return this[6].toBigInt();
  }

  get sellingPrice(): BigInt {
    return this[7].toBigInt();
  }

  get totalBids(): BigInt {
    return this[8].toBigInt();
  }

  get selectedBidId(): BigInt {
    return this[9].toBigInt();
  }

  get installment(): i32 {
    return this[10].toI32();
  }
}

export class ProjectY__getUserNFTsOngoingInstallmentPhaseResultSellerInfos_Struct extends ethereum.Tuple {
  get onSale(): boolean {
    return this[0].toBoolean();
  }

  get sellerAddress(): Address {
    return this[1].toAddress();
  }

  get contractAddress(): Address {
    return this[2].toAddress();
  }

  get installmentsPaid(): i32 {
    return this[3].toI32();
  }

  get paymentsClaimed(): i32 {
    return this[4].toI32();
  }

  get timestamp(): BigInt {
    return this[5].toBigInt();
  }

  get tokenId(): BigInt {
    return this[6].toBigInt();
  }

  get sellingPrice(): BigInt {
    return this[7].toBigInt();
  }

  get totalBids(): BigInt {
    return this[8].toBigInt();
  }

  get selectedBidId(): BigInt {
    return this[9].toBigInt();
  }

  get installment(): i32 {
    return this[10].toI32();
  }
}

export class ProjectY__getUserNFTsOngoingInstallmentPhaseResultBuyerInfos_Struct extends ethereum.Tuple {
  get isSelected(): boolean {
    return this[0].toBoolean();
  }

  get buyerAddress(): Address {
    return this[1].toAddress();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }

  get bidPrice(): BigInt {
    return this[3].toBigInt();
  }

  get entryId(): BigInt {
    return this[4].toBigInt();
  }

  get pricePaid(): BigInt {
    return this[5].toBigInt();
  }

  get bidInstallment(): i32 {
    return this[6].toI32();
  }
}

export class ProjectY__getUserNFTsOngoingInstallmentPhaseResult {
  value0: Array<
    ProjectY__getUserNFTsOngoingInstallmentPhaseResultSellerInfos_Struct
  >;
  value1: Array<
    ProjectY__getUserNFTsOngoingInstallmentPhaseResultBuyerInfos_Struct
  >;
  value2: Array<BigInt>;
  value3: Array<BigInt>;
  value4: Array<BigInt>;
  value5: Array<BigInt>;

  constructor(
    value0: Array<
      ProjectY__getUserNFTsOngoingInstallmentPhaseResultSellerInfos_Struct
    >,
    value1: Array<
      ProjectY__getUserNFTsOngoingInstallmentPhaseResultBuyerInfos_Struct
    >,
    value2: Array<BigInt>,
    value3: Array<BigInt>,
    value4: Array<BigInt>,
    value5: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTupleArray(this.value0));
    map.set("value1", ethereum.Value.fromTupleArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigIntArray(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigIntArray(this.value5));
    return map;
  }

  getSellerInfos_(): Array<
    ProjectY__getUserNFTsOngoingInstallmentPhaseResultSellerInfos_Struct
  > {
    return this.value0;
  }

  getBuyerInfos_(): Array<
    ProjectY__getUserNFTsOngoingInstallmentPhaseResultBuyerInfos_Struct
  > {
    return this.value1;
  }

  getDownPayments_(): Array<BigInt> {
    return this.value2;
  }

  getMonthlyPayments_(): Array<BigInt> {
    return this.value3;
  }

  getEntryIds_(): Array<BigInt> {
    return this.value4;
  }

  getBidIds_(): Array<BigInt> {
    return this.value5;
  }
}

export class ProjectY__getUserNFTsOpenForSaleResultUserNFTsOpenForSale_Struct extends ethereum.Tuple {
  get onSale(): boolean {
    return this[0].toBoolean();
  }

  get sellerAddress(): Address {
    return this[1].toAddress();
  }

  get contractAddress(): Address {
    return this[2].toAddress();
  }

  get installmentsPaid(): i32 {
    return this[3].toI32();
  }

  get paymentsClaimed(): i32 {
    return this[4].toI32();
  }

  get timestamp(): BigInt {
    return this[5].toBigInt();
  }

  get tokenId(): BigInt {
    return this[6].toBigInt();
  }

  get sellingPrice(): BigInt {
    return this[7].toBigInt();
  }

  get totalBids(): BigInt {
    return this[8].toBigInt();
  }

  get selectedBidId(): BigInt {
    return this[9].toBigInt();
  }

  get installment(): i32 {
    return this[10].toI32();
  }
}

export class ProjectY__getUserNFTsOpenForSaleResult {
  value0: Array<
    ProjectY__getUserNFTsOpenForSaleResultUserNFTsOpenForSale_Struct
  >;
  value1: Array<BigInt>;

  constructor(
    value0: Array<
      ProjectY__getUserNFTsOpenForSaleResultUserNFTsOpenForSale_Struct
    >,
    value1: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTupleArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getUserNFTsOpenForSale_(): Array<
    ProjectY__getUserNFTsOpenForSaleResultUserNFTsOpenForSale_Struct
  > {
    return this.value0;
  }

  getEntryIds_(): Array<BigInt> {
    return this.value1;
  }
}

export class ProjectY extends ethereum.SmartContract {
  static bind(address: Address): ProjectY {
    return new ProjectY("ProjectY", address);
  }

  ONE_MONTH(): BigInt {
    let result = super.call("ONE_MONTH", "ONE_MONTH():(uint64)", []);

    return result[0].toBigInt();
  }

  try_ONE_MONTH(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ONE_MONTH", "ONE_MONTH():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  biddingPeriod(): BigInt {
    let result = super.call("biddingPeriod", "biddingPeriod():(uint64)", []);

    return result[0].toBigInt();
  }

  try_biddingPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("biddingPeriod", "biddingPeriod():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllBidsOnNFT(entryId_: BigInt): ProjectY__getAllBidsOnNFTResult {
    let result = super.call(
      "getAllBidsOnNFT",
      "getAllBidsOnNFT(uint256):((bool,address,uint64,uint256,uint256,uint256,uint8)[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(entryId_)]
    );

    return new ProjectY__getAllBidsOnNFTResult(
      result[0].toTupleArray<
        ProjectY__getAllBidsOnNFTResultAllBidsOnNFT_Struct
      >(),
      result[1].toBigIntArray()
    );
  }

  try_getAllBidsOnNFT(
    entryId_: BigInt
  ): ethereum.CallResult<ProjectY__getAllBidsOnNFTResult> {
    let result = super.tryCall(
      "getAllBidsOnNFT",
      "getAllBidsOnNFT(uint256):((bool,address,uint64,uint256,uint256,uint256,uint8)[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(entryId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ProjectY__getAllBidsOnNFTResult(
        value[0].toTupleArray<
          ProjectY__getAllBidsOnNFTResultAllBidsOnNFT_Struct
        >(),
        value[1].toBigIntArray()
      )
    );
  }

  getBuyerInfo(bidId_: BigInt): ProjectY__getBuyerInfoResultValue0Struct {
    let result = super.call(
      "getBuyerInfo",
      "getBuyerInfo(uint256):((bool,address,uint64,uint256,uint256,uint256,uint8))",
      [ethereum.Value.fromUnsignedBigInt(bidId_)]
    );

    return changetype<ProjectY__getBuyerInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getBuyerInfo(
    bidId_: BigInt
  ): ethereum.CallResult<ProjectY__getBuyerInfoResultValue0Struct> {
    let result = super.tryCall(
      "getBuyerInfo",
      "getBuyerInfo(uint256):((bool,address,uint64,uint256,uint256,uint256,uint8))",
      [ethereum.Value.fromUnsignedBigInt(bidId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ProjectY__getBuyerInfoResultValue0Struct>(value[0].toTuple())
    );
  }

  getDownPaymentAmount(bidId_: BigInt): BigInt {
    let result = super.call(
      "getDownPaymentAmount",
      "getDownPaymentAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(bidId_)]
    );

    return result[0].toBigInt();
  }

  try_getDownPaymentAmount(bidId_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDownPaymentAmount",
      "getDownPaymentAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(bidId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getHistoricTotalBidIds(): BigInt {
    let result = super.call(
      "getHistoricTotalBidIds",
      "getHistoricTotalBidIds():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getHistoricTotalBidIds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getHistoricTotalBidIds",
      "getHistoricTotalBidIds():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getHistoricTotalEntryIds(): BigInt {
    let result = super.call(
      "getHistoricTotalEntryIds",
      "getHistoricTotalEntryIds():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getHistoricTotalEntryIds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getHistoricTotalEntryIds",
      "getHistoricTotalEntryIds():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getInstallmentAmountPerMonth(entryId_: BigInt): BigInt {
    let result = super.call(
      "getInstallmentAmountPerMonth",
      "getInstallmentAmountPerMonth(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(entryId_)]
    );

    return result[0].toBigInt();
  }

  try_getInstallmentAmountPerMonth(
    entryId_: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getInstallmentAmountPerMonth",
      "getInstallmentAmountPerMonth(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(entryId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getInstallmentMonthTimestamp(
    bidId_: BigInt,
    installmentNumber_: BigInt
  ): BigInt {
    let result = super.call(
      "getInstallmentMonthTimestamp",
      "getInstallmentMonthTimestamp(uint256,uint64):(uint64)",
      [
        ethereum.Value.fromUnsignedBigInt(bidId_),
        ethereum.Value.fromUnsignedBigInt(installmentNumber_)
      ]
    );

    return result[0].toBigInt();
  }

  try_getInstallmentMonthTimestamp(
    bidId_: BigInt,
    installmentNumber_: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getInstallmentMonthTimestamp",
      "getInstallmentMonthTimestamp(uint256,uint64):(uint64)",
      [
        ethereum.Value.fromUnsignedBigInt(bidId_),
        ethereum.Value.fromUnsignedBigInt(installmentNumber_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getIsBidIdValid(bidId_: BigInt): boolean {
    let result = super.call(
      "getIsBidIdValid",
      "getIsBidIdValid(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(bidId_)]
    );

    return result[0].toBoolean();
  }

  try_getIsBidIdValid(bidId_: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getIsBidIdValid",
      "getIsBidIdValid(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(bidId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getIsEntryIdValid(entryId_: BigInt): boolean {
    let result = super.call(
      "getIsEntryIdValid",
      "getIsEntryIdValid(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(entryId_)]
    );

    return result[0].toBoolean();
  }

  try_getIsEntryIdValid(entryId_: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getIsEntryIdValid",
      "getIsEntryIdValid(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(entryId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getNFTsOpenForSale(): ProjectY__getNFTsOpenForSaleResult {
    let result = super.call(
      "getNFTsOpenForSale",
      "getNFTsOpenForSale():((bool,address,address,uint8,uint8,uint64,uint256,uint256,uint256,uint256,uint8)[],uint256[])",
      []
    );

    return new ProjectY__getNFTsOpenForSaleResult(
      result[0].toTupleArray<
        ProjectY__getNFTsOpenForSaleResultNftsOpenForSale_Struct
      >(),
      result[1].toBigIntArray()
    );
  }

  try_getNFTsOpenForSale(): ethereum.CallResult<
    ProjectY__getNFTsOpenForSaleResult
  > {
    let result = super.tryCall(
      "getNFTsOpenForSale",
      "getNFTsOpenForSale():((bool,address,address,uint8,uint8,uint64,uint256,uint256,uint256,uint256,uint8)[],uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ProjectY__getNFTsOpenForSaleResult(
        value[0].toTupleArray<
          ProjectY__getNFTsOpenForSaleResultNftsOpenForSale_Struct
        >(),
        value[1].toBigIntArray()
      )
    );
  }

  getSellerInfo(entryId_: BigInt): ProjectY__getSellerInfoResultValue0Struct {
    let result = super.call(
      "getSellerInfo",
      "getSellerInfo(uint256):((bool,address,address,uint8,uint8,uint64,uint256,uint256,uint256,uint256,uint8))",
      [ethereum.Value.fromUnsignedBigInt(entryId_)]
    );

    return changetype<ProjectY__getSellerInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getSellerInfo(
    entryId_: BigInt
  ): ethereum.CallResult<ProjectY__getSellerInfoResultValue0Struct> {
    let result = super.tryCall(
      "getSellerInfo",
      "getSellerInfo(uint256):((bool,address,address,uint8,uint8,uint64,uint256,uint256,uint256,uint256,uint8))",
      [ethereum.Value.fromUnsignedBigInt(entryId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ProjectY__getSellerInfoResultValue0Struct>(value[0].toTuple())
    );
  }

  getTotalBidIds(): BigInt {
    let result = super.call("getTotalBidIds", "getTotalBidIds():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalBidIds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalBidIds",
      "getTotalBidIds():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalEntryIds(): BigInt {
    let result = super.call(
      "getTotalEntryIds",
      "getTotalEntryIds():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalEntryIds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalEntryIds",
      "getTotalEntryIds():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalInstallments(bidId_: BigInt): i32 {
    let result = super.call(
      "getTotalInstallments",
      "getTotalInstallments(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(bidId_)]
    );

    return result[0].toI32();
  }

  try_getTotalInstallments(bidId_: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getTotalInstallments",
      "getTotalInstallments(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(bidId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getUserNFTsOngoingInstallmentPhase(
    user_: Address
  ): ProjectY__getUserNFTsOngoingInstallmentPhaseResult {
    let result = super.call(
      "getUserNFTsOngoingInstallmentPhase",
      "getUserNFTsOngoingInstallmentPhase(address):((bool,address,address,uint8,uint8,uint64,uint256,uint256,uint256,uint256,uint8)[],(bool,address,uint64,uint256,uint256,uint256,uint8)[],uint256[],uint256[],uint256[],uint256[])",
      [ethereum.Value.fromAddress(user_)]
    );

    return new ProjectY__getUserNFTsOngoingInstallmentPhaseResult(
      result[0].toTupleArray<
        ProjectY__getUserNFTsOngoingInstallmentPhaseResultSellerInfos_Struct
      >(),
      result[1].toTupleArray<
        ProjectY__getUserNFTsOngoingInstallmentPhaseResultBuyerInfos_Struct
      >(),
      result[2].toBigIntArray(),
      result[3].toBigIntArray(),
      result[4].toBigIntArray(),
      result[5].toBigIntArray()
    );
  }

  try_getUserNFTsOngoingInstallmentPhase(
    user_: Address
  ): ethereum.CallResult<ProjectY__getUserNFTsOngoingInstallmentPhaseResult> {
    let result = super.tryCall(
      "getUserNFTsOngoingInstallmentPhase",
      "getUserNFTsOngoingInstallmentPhase(address):((bool,address,address,uint8,uint8,uint64,uint256,uint256,uint256,uint256,uint8)[],(bool,address,uint64,uint256,uint256,uint256,uint8)[],uint256[],uint256[],uint256[],uint256[])",
      [ethereum.Value.fromAddress(user_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ProjectY__getUserNFTsOngoingInstallmentPhaseResult(
        value[0].toTupleArray<
          ProjectY__getUserNFTsOngoingInstallmentPhaseResultSellerInfos_Struct
        >(),
        value[1].toTupleArray<
          ProjectY__getUserNFTsOngoingInstallmentPhaseResultBuyerInfos_Struct
        >(),
        value[2].toBigIntArray(),
        value[3].toBigIntArray(),
        value[4].toBigIntArray(),
        value[5].toBigIntArray()
      )
    );
  }

  getUserNFTsOpenForSale(
    user_: Address
  ): ProjectY__getUserNFTsOpenForSaleResult {
    let result = super.call(
      "getUserNFTsOpenForSale",
      "getUserNFTsOpenForSale(address):((bool,address,address,uint8,uint8,uint64,uint256,uint256,uint256,uint256,uint8)[],uint256[])",
      [ethereum.Value.fromAddress(user_)]
    );

    return new ProjectY__getUserNFTsOpenForSaleResult(
      result[0].toTupleArray<
        ProjectY__getUserNFTsOpenForSaleResultUserNFTsOpenForSale_Struct
      >(),
      result[1].toBigIntArray()
    );
  }

  try_getUserNFTsOpenForSale(
    user_: Address
  ): ethereum.CallResult<ProjectY__getUserNFTsOpenForSaleResult> {
    let result = super.tryCall(
      "getUserNFTsOpenForSale",
      "getUserNFTsOpenForSale(address):((bool,address,address,uint8,uint8,uint64,uint256,uint256,uint256,uint256,uint8)[],uint256[])",
      [ethereum.Value.fromAddress(user_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ProjectY__getUserNFTsOpenForSaleResult(
        value[0].toTupleArray<
          ProjectY__getUserNFTsOpenForSaleResultUserNFTsOpenForSale_Struct
        >(),
        value[1].toBigIntArray()
      )
    );
  }

  gracePeriod(): BigInt {
    let result = super.call("gracePeriod", "gracePeriod():(uint64)", []);

    return result[0].toBigInt();
  }

  try_gracePeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("gracePeriod", "gracePeriod():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sell(
    contractAddress_: Address,
    tokenId_: BigInt,
    sellingPrice_: BigInt,
    installment_: i32
  ): BigInt {
    let result = super.call(
      "sell",
      "sell(address,uint256,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress_),
        ethereum.Value.fromUnsignedBigInt(tokenId_),
        ethereum.Value.fromUnsignedBigInt(sellingPrice_),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(installment_))
      ]
    );

    return result[0].toBigInt();
  }

  try_sell(
    contractAddress_: Address,
    tokenId_: BigInt,
    sellingPrice_: BigInt,
    installment_: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sell",
      "sell(address,uint256,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress_),
        ethereum.Value.fromUnsignedBigInt(tokenId_),
        ethereum.Value.fromUnsignedBigInt(sellingPrice_),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(installment_))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawSell(entryId_: BigInt): BigInt {
    let result = super.call("withdrawSell", "withdrawSell(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(entryId_)
    ]);

    return result[0].toBigInt();
  }

  try_withdrawSell(entryId_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawSell",
      "withdrawSell(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(entryId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get owner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get entryId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bidPrice_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get installment_(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get entryId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PayInstallmentCall extends ethereum.Call {
  get inputs(): PayInstallmentCall__Inputs {
    return new PayInstallmentCall__Inputs(this);
  }

  get outputs(): PayInstallmentCall__Outputs {
    return new PayInstallmentCall__Outputs(this);
  }
}

export class PayInstallmentCall__Inputs {
  _call: PayInstallmentCall;

  constructor(call: PayInstallmentCall) {
    this._call = call;
  }

  get entryId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PayInstallmentCall__Outputs {
  _call: PayInstallmentCall;

  constructor(call: PayInstallmentCall) {
    this._call = call;
  }
}

export class SelectBidCall extends ethereum.Call {
  get inputs(): SelectBidCall__Inputs {
    return new SelectBidCall__Inputs(this);
  }

  get outputs(): SelectBidCall__Outputs {
    return new SelectBidCall__Outputs(this);
  }
}

export class SelectBidCall__Inputs {
  _call: SelectBidCall;

  constructor(call: SelectBidCall) {
    this._call = call;
  }

  get bidId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SelectBidCall__Outputs {
  _call: SelectBidCall;

  constructor(call: SelectBidCall) {
    this._call = call;
  }
}

export class SellCall extends ethereum.Call {
  get inputs(): SellCall__Inputs {
    return new SellCall__Inputs(this);
  }

  get outputs(): SellCall__Outputs {
    return new SellCall__Outputs(this);
  }
}

export class SellCall__Inputs {
  _call: SellCall;

  constructor(call: SellCall) {
    this._call = call;
  }

  get contractAddress_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sellingPrice_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get installment_(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class SellCall__Outputs {
  _call: SellCall;

  constructor(call: SellCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetBiddingPeriodCall extends ethereum.Call {
  get inputs(): SetBiddingPeriodCall__Inputs {
    return new SetBiddingPeriodCall__Inputs(this);
  }

  get outputs(): SetBiddingPeriodCall__Outputs {
    return new SetBiddingPeriodCall__Outputs(this);
  }
}

export class SetBiddingPeriodCall__Inputs {
  _call: SetBiddingPeriodCall;

  constructor(call: SetBiddingPeriodCall) {
    this._call = call;
  }

  get biddingPeriod_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetBiddingPeriodCall__Outputs {
  _call: SetBiddingPeriodCall;

  constructor(call: SetBiddingPeriodCall) {
    this._call = call;
  }
}

export class SetGracePeriodCall extends ethereum.Call {
  get inputs(): SetGracePeriodCall__Inputs {
    return new SetGracePeriodCall__Inputs(this);
  }

  get outputs(): SetGracePeriodCall__Outputs {
    return new SetGracePeriodCall__Outputs(this);
  }
}

export class SetGracePeriodCall__Inputs {
  _call: SetGracePeriodCall;

  constructor(call: SetGracePeriodCall) {
    this._call = call;
  }

  get gracePeriod_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetGracePeriodCall__Outputs {
  _call: SetGracePeriodCall;

  constructor(call: SetGracePeriodCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class WithdrawBidCall extends ethereum.Call {
  get inputs(): WithdrawBidCall__Inputs {
    return new WithdrawBidCall__Inputs(this);
  }

  get outputs(): WithdrawBidCall__Outputs {
    return new WithdrawBidCall__Outputs(this);
  }
}

export class WithdrawBidCall__Inputs {
  _call: WithdrawBidCall;

  constructor(call: WithdrawBidCall) {
    this._call = call;
  }

  get bidId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawBidCall__Outputs {
  _call: WithdrawBidCall;

  constructor(call: WithdrawBidCall) {
    this._call = call;
  }
}

export class WithdrawPaymentCall extends ethereum.Call {
  get inputs(): WithdrawPaymentCall__Inputs {
    return new WithdrawPaymentCall__Inputs(this);
  }

  get outputs(): WithdrawPaymentCall__Outputs {
    return new WithdrawPaymentCall__Outputs(this);
  }
}

export class WithdrawPaymentCall__Inputs {
  _call: WithdrawPaymentCall;

  constructor(call: WithdrawPaymentCall) {
    this._call = call;
  }

  get entryId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawPaymentCall__Outputs {
  _call: WithdrawPaymentCall;

  constructor(call: WithdrawPaymentCall) {
    this._call = call;
  }
}

export class WithdrawSellCall extends ethereum.Call {
  get inputs(): WithdrawSellCall__Inputs {
    return new WithdrawSellCall__Inputs(this);
  }

  get outputs(): WithdrawSellCall__Outputs {
    return new WithdrawSellCall__Outputs(this);
  }
}

export class WithdrawSellCall__Inputs {
  _call: WithdrawSellCall;

  constructor(call: WithdrawSellCall) {
    this._call = call;
  }

  get entryId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawSellCall__Outputs {
  _call: WithdrawSellCall;

  constructor(call: WithdrawSellCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
